// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                       String                    @id @default(cuid())
    userId                   String                    @unique
    name                     String?
    email                    String?                   @unique
    emailVerified            DateTime?
    image                    String?
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripeSubscriptionStatus StripeSubscriptionStatus?
    bookSessions             BookSession[]
}

enum StripeSubscriptionStatus {
    incomplete
    incomplete_expired
    trialing
    active
    past_due
    canceled
    unpaid
    paused
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StripeEvent {
    id               String   @id @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}

model Book {
    id           String        @id @default(cuid())
    bookTitle    String
    author       String
    image        String
    summary      String
    chapters     Chapter[]
    bookSessions BookSession[]
}

model Chapter {
    id              String           @id @default(cuid())
    chapterTitle    String
    chapterNumber   Int
    book            Book             @relation(fields: [bookId], references: [id])
    bookId          String
    chapterSessions ChapterSession[]
}

model BookSession {
    id              String           @id @default(cuid())
    user            User             @relation(fields: [userId], references: [id])
    userId          String
    book            Book             @relation(fields: [bookId], references: [id])
    bookId          String
    progress        Int // Represents the last chapter number the user has interacted with
    // Add any additional fields relevant to a book session
    chapterSessions ChapterSession[]
}

model ChapterSession {
    id            String       @id @default(cuid())
    bookSession   BookSession  @relation(fields: [bookSessionId], references: [id])
    bookSessionId String
    chapter       Chapter      @relation(fields: [chapterId], references: [id])
    chapterId     String
    summary       String?
    actionItems   ActionItem[]
    messages      Message[]
}

model Message {
    id               String         @id @default(cuid())
    chapterSession   ChapterSession @relation(fields: [chapterSessionId], references: [id])
    chapterSessionId String
    content          String
    createdAt        DateTime       @default(now())
    // Consider adding a field to distinguish between user and AI messages
}

model ActionItem {
    id               String           @id @default(cuid())
    actionItem       String
    chapterSession   ChapterSession   @relation(fields: [chapterSessionId], references: [id])
    chapterSessionId String
    actionItemStatus ActionItemStatus
}

enum ActionItemStatus {
    incomplete
    complete
}
